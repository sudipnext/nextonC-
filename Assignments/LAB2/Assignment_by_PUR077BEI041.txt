// Write a program to set a structure to hold a date (mm,dd and yy),
// assign values to the members of the structure and print out the values 
// in the format 11/28/2004 by function. Pass the structure to the function
#include <iostream>

using namespace std;
struct date
{
    int m, d, y;
}x;
void display(struct date);

int main(){
   cout << "Enter the date in the format mm dd yy";
   cin >> x.m >> x.d >> x.y;
   display(x);

}
void display(date x){
    cout << x.m <<"/"<< x.d <<"/"<< x.y;
}// Write a program using the function overloading that converts feet to inches.
//  Use function with no argument, one argument and two arguments. Decide yourself 
//  the types of arguments. Use pass by reference in any one of the function above.
#include <iostream>
using namespace std;

void converter();
void converter(float &);
void converter(float &, float &);

int main()
{
    float x,y;
    cout << "Enter the data you want to convert from feet to inches";
    cin >> x >> y;
    converter();
    // converter(x,y);
}

void converter(float &x){
    cout << "type 1\n";
    cout << x *12;
}
void converter(float &x, float &y){
    cout << "type 2\n";
    cout << x *12;
}
void converter(){
    cout << "PLEASE ENTER A VALUE";
}// Define two namespaces: Square and Cube. In both the namespaces,
//  define an integer variable named "num" and a function named "fun".
//   The "fun" function in "Square" namespace, should return the square
//    of an integer passed as an argument while the "fun" function in "Cube"
//     namespace, should return the cube of an integer passed as an argument.
//      In the main function, set the integer variables "num" of both the namespaces
//       with different values. Then, compute and print the cube of the integer
//        variable "num" of the "Square" namespace using the "fun" function of
//         the "Cube" namespace and the square of the integer variable "num" of
//          the "Cube" namespace using the "fun" function of the "Square" namespace.

#include <iostream>

using namespace std;
namespace Square{
    int num;
    int fun(int num){
        return num * num;
    }

}
namespace Cube{
    int num;
    int fun(int num){
        return num*num*num;
    }

}

int main(){
    int num;
    cin >> num;
    cout << Square::fun(num) << " is the square of the number\n";
    cout << Cube::fun(num) << " is the cube of the number\n";
}//Write a function that passes two temperatures by reference and sets the larger
// of the two numbers to a value entered by user by using return by reference.
#include <iostream>

using namespace std;
float& display(float &, float &);
int main(){
    float a, b;
    cout << "Enter the two temprs: -- ";
    cin >> a >>b;
    cout << display(a, b);
    return 0;

}
float& display(float &x, float &y){
    if (x > y){
        return x;
    }
    else{
        return y;
    }
}// Assume that employee will have to pay 10 percent income tax to the government.
//  Ask user to enter the employee salary. Use inline function to display the net
//  payment to the employee by the company.

#include <iostream>

using namespace std;
inline float netpay(int x){
    return x * 90/100;
}

int main(){
    float sal;
    cout <<"Enter the employee salary\n";
    cin >> sal;
    cout << netpay(sal) <<endl;
}// // Write a program that displays the current monthly salary of chief executive officer,
// information officer, and system analyst, programmer that has been increased by 9, 10, 12,
// and 12 percentages respectively in year 2010. Let us assume that the salaries in year 2009 are
// Chief executive officer Rs. 35000/m
// Information officer Rs. 25000/m
// System analyst Rs. 24000/m
// Programmer Rs. 18000/m
// Make a function that takes two arguments; one salary and the other increment. Use proper default argument.
#include <iostream>
using namespace std;
float salarydisplayer(float, float);
int main()
{
    int a, b;
    cin >> a >> b;
    cout << "For CEO "<<salarydisplayer(a, b)<<endl;
    cin >> a >> b;
    cout <<"For IO "<< salarydisplayer(a, b)<<endl;
    cin >> a >> b;
    cout <<"For ANALYIST "<< salarydisplayer(a, b)<<endl;
    
}   
float salarydisplayer(float x, float y)
{
    return x * (y+100) / 100;

}